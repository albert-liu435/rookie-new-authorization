授权码模式:
请求流程authorization_code.png




1、在浏览器中输入如下url
    http://127.0.0.1:8080/oauth2/authorize?client_id=messaging-client&response_type=code&scope=message.read&redirect_uri=https://www.baidu.com
    1.1、OAuth2AuthorizationEndpointFilter
        1.1.1 首先判断是否匹配uri,默认为/oauth2/authorize，匹配则进行处理，不匹配则进入下一个Filter
        1.1.2 委托类DelegatingAuthenticationConverter进行将请求转换为Authentication(OAuth2AuthorizationCodeRequestAuthenticationToken)，默认由OAuth2AuthorizationCodeRequestAuthenticationConverter处理
            进行匹配判断,然后获取所有所有的请求参数
            获取请求参数response_type，这里为code,并进行判断，如果为空或者参数个数不为1，或者参数值不为code,则抛出异常
            获取uri,这里为http://127.0.0.1:8080/oauth2/authorize
            获取请求参数client_id，这里为messaging-client,如果为空或者参数个数不为1,则抛出异常
            获取Authentication，因为是第一次请求，所以为null,然后设置为AnonymousAuthenticationToken("anonymous", "anonymousUser", AuthorityUtils.createAuthorityList("ROLE_ANONYMOUS"))
            获取请求参数redirect_uri，这里为https://www.baidu.com
            获取请求参数scope，如果多个的话，在请求url上面用空格分隔
            获取请求参数state，这里为空,获取请求参数code_challenge，这里为空，获取请求参数code_challenge_method,这里为空,获取其他额外参数
            将上面获取到的参数封装到OAuth2AuthorizationCodeRequestAuthenticationToken中并返回
        1.1.3 判断OAuth2AuthorizationCodeRequestAuthenticationToken是否为AbstractAuthenticationToken或者子类，如果是的话，就向Authentication中设置AuthenticationDetailsSource，默认为WebAuthenticationDetailsSource，里面封装了ip和sessionID
        1.1.4 ProviderManager 进行身份验证，会委托给OAuth2AuthorizationCodeRequestAuthenticationProvider进行处理
            通过registeredClientRepository查询出ID为messaging-client的RegisteredClient,然后构建		OAuth2AuthorizationCodeRequestAuthenticationContext authenticationContext,里面封装了RegisteredClient和OAuth2AuthorizationCodeRequestAuthenticationToken，并对OAuth2AuthorizationCodeRequestAuthenticationContext进行校验
            获取code_challenge，这里为空
            判断Authentication principal是否验证过，这里为AnonymousAuthenticationToken，也就是没有验证过，所以会将OAuth2AuthorizationCodeRequestAuthenticationToken返回
        1.1.5 由于是匿名访问，所以会进入到下一个过滤器中
    1.2 ExceptionTranslationFilter
        由于是匿名访问，经过前面的过滤器后，最终会进入到ExceptionTranslationFilter#handleSpringSecurityException()方法进行处理
        1.2.1   handleSpringSecurityException方法进行处理的时候，抛出的异常为AuthenticationException类型，所以会进入到handleAuthenticationException
        1.2.3   将该请求保存到session中，并进行重定向到登录页面

2、在登陆页面输入账号和密码
    admin,123456
    2.1 UsernamePasswordAuthenticationFilter
        2.1.1   http://127.0.0.1:8080/login进行登录,会通过UsernamePasswordAuthenticationFilter过滤器进行验证用户名和密码,验证通过
        2.1.2   successfulAuthentication()方法，通过调用SavedRequestAwareAuthenticationSuccessHandler#onAuthenticationSuccess(),从session中获取SavedRequest,默认为DefaultSavedRequest,里面封装了上次请求的信息，然后获取targetUrl:http://127.0.0.1:8080/oauth2/authorize?client_id=messaging-client&response_type=code&scope=message.read&redirect_uri=https://www.baidu.com&continue,进行重定向操作

3、重定向到http://127.0.0.1:8080/oauth2/authorize?client_id=messaging-client&response_type=code&scope=message.read&redirect_uri=https://www.baidu.com&continue
    这次进行请求的时候，由于这次已经经过了身份认证，所以会通过,然后经过OAuth2AuthorizationEndpointFilter
    3.1 OAuth2AuthorizationEndpointFilter
        3.1.1   会重新执行上面的1.1的流程
        3.1.2   ProviderManager 进行身份验证，会委托给OAuth2AuthorizationCodeRequestAuthenticationProvider进行处理
            通过registeredClientRepository查询出ID为messaging-client的RegisteredClient,然后构建		OAuth2AuthorizationCodeRequestAuthenticationContext authenticationContext,里面封装了RegisteredClient和OAuth2AuthorizationCodeRequestAuthenticationToken，并对OAuth2AuthorizationCodeRequestAuthenticationContext进行校验。获取code_challenge，这里为空
            判断Authentication principal是否验证过，此时已经验证通过，将OAuth2AuthorizationCodeRequestAuthenticationToken里面的信息封装到OAuth2AuthorizationRequest中,然后根据 registeredClientId和principalName,registeredClientId为oauth2_registered_client,其中记录messaging-client唯一ID,principalName为登录账号账号admin，查询oauth2_authorization_consent表是否存在，然后进行校验，校验通过进行下一步，根据得到的OAuth2AuthorizationConsent,判断是否需要重定向到，我们这里需要，所以返回OAuth2AuthorizationConsentAuthenticationToken,然后进行 重定向到http://127.0.0.1:8080/oauth2/consent?scope=message.read&client_id=messaging-client&state=guFhjM7Ss6mG23pWdlZVAqCNYqtu7l2BOWv5kLIAozA%3D页面。

4、进行提交操作http://127.0.0.1:8080/oauth2/authorize,
    4.1 OAuth2AuthorizationEndpointFilter
        4.1.1   通过OAuth2AuthorizationEndpointFilter过滤,此时通过OAuth2AuthorizationConsentAuthenticationConverter进行转换，转换为OAuth2AuthorizationConsentAuthenticationToken,然后通过OAuth2AuthorizationConsentAuthenticationProvider进行验证，最终生成OAuth2AuthorizationCodeRequestAuthenticationToken,此时OAuth2AuthorizationCodeRequestAuthenticationToken这个里面包含了所需要的code,然后通过OAuth2AuthorizationEndpointFilter#sendAuthorizationResponse方法进行重定向，重定向后的会携带code在url后面
5、使用postman进行换取token
    post请求：http://127.0.0.1:8080/oauth2/token,
    通过OAuth2ClientAuthenticationFilter过滤器，通过ClientSecretBasicAuthenticationConverter进行转换OAuth2ClientAuthenticationToken，OAuth2ClientAuthenticationToken存储的username和password已经解析成了明文然后并经过ClientSecretAuthenticationProvider验证后生成OAuth2ClientAuthenticationToken。然后通过OAuth2TokenEndpointFilter过滤器，由OAuth2AuthorizationCodeAuthenticationConverter将请求转换为OAuth2AuthorizationCodeAuthenticationToken，然后通过OAuth2AuthorizationCodeAuthenticationProvider进行身份验证，验证通过就进行生成OAuth2AccessTokenAuthenticationToken，里面包含accesstoken和refreshtoken，并返回给客户端
6、携带token进行请求
        会通过BearerTokenAuthenticationFilter过滤器，然后进行JwtAuthenticationProvider验证，验证通过后再进行scope验证，就可以访问到资源了
